@page "/"
@inject NavigationManager Navigation
@inject StandData Stands

<br/>
<br/>
<br />
<br />
<Modal @ref="modal" ModalType="ModalType.Dark" IsVerticallyCentered="true">
    <BodyTemplate>
        <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
            <img style="max-width: 300px; max-height: 300px;"
                 src="@($"data:image/png;base64,{Convert.ToBase64String(tempstanddata.Img)}")"
                 alt="@($"{tempstanddata.Name}.png")" />
        </div>
        <SfChart>
            <ChartPrimaryXAxis Coefficient="100" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelPlacement="LabelPlacement.OnTicks">
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis IsInversed LabelFormat="" Minimum="65" Maximum="69" Interval="1">
            </ChartPrimaryYAxis>
            <ChartEvents OnAxisLabelRender="LabelRender"></ChartEvents>


            <ChartSeriesCollection>
                <ChartSeries DataSource="@StandDataSet" XName="X" YName="Y"
                             Type="ChartSeriesType.Radar" DrawType="ChartDrawType.Line">
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </BodyTemplate>
</Modal>

<button class="btn btn-primary" @onclick="@( () => Navigation.NavigateTo("createstand"))">Create A Stand</button>

<br/>
<br/>
<SfGrid DataSource="@StandsList" AllowPaging="true" AllowSorting="true" AllowFiltering="true" EnableStickyHeader=true>
    <GridPageSettings PageCount="5" PageSizes="true"/>

    <GridColumns>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.ID) HeaderText="ID" Width="25" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn AllowSorting="false" AllowFiltering="false" Field=@nameof(StandDataTable.Img) HeaderText="Image" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})">
            <Template>
                @{
                    var stand = context as StandDataTable;
                }

                <td style="">
                    <img style="max-width: 100px; max-height: 100px;" src="@($"data:image/png;base64,{Convert.ToBase64String(stand.Img)}")" alt="@($"{stand.Name}.png")" />
                </td>
            </Template>
        </Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Name) HeaderText="Name" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Power) HeaderText="Power" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Speed) HeaderText="Speed" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Range) HeaderText="Range" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Persistence) HeaderText="Persistence" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Precision) HeaderText="Precision" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn Field=@nameof(StandDataTable.Potential) HeaderText="Potential" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})"></Syncfusion.Blazor.Grids.GridColumn>
        <Syncfusion.Blazor.Grids.GridColumn AllowSorting="false" AllowFiltering="false" Field=@nameof(StandDataTable.Desc) HeaderText="Options" Width="120" TextAlign="TextAlign.Center" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "customcss" }})">
            <Template>
                @{
                    var stand = context as StandDataTable;
                }
                <td>
                    <button class="btn btn-primary" @onclick="@(()=>Navigation.NavigateTo($"/editstand/{stand.ID}"))">Edit</button>
                    <button class="btn btn-primary" @onclick="()=>OnShowModalClick(stand.ID)">Details</button>
                </td>
            </Template>
        </Syncfusion.Blazor.Grids.GridColumn>
    </GridColumns>
</SfGrid>
<style>
    .e-grid .e-headercell.customcss {
        background-color: rgb(33, 37, 41);
        color: white;
    }
</style>



@code
{
    private int value;
    private StandDataTable[]? StandsList;

    protected override async Task OnInitializedAsync()
    {
        StandsList = await Stands.GetStandsAsync();
    }






    //Modal
    private Modal modal;
    private StandDataTable? tempstanddata;

    private async Task OnShowModalClick(int ID)
    {
        tempstanddata = await Stands.StandDataRetrieveAsync(ID);
        stand = tempstanddata;
        InitializeDataSet();
        await modal?.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }


    //stand chart

    string[] stringarr = new string[] { "A", "B", "C", "D", "E" };
    private int count = 0;
    List<ChartData> StandDataSet = new List<ChartData>();
    StandDataTable? stand;

    public void LabelRender(AxisLabelRenderEventArgs args)
    {


        if (count > 4)
        {
            count = 0;
        }
        else if (args.Axis.Name == "PrimaryYAxis")
        {
            args.Text = stringarr[count];
            count++;
        }
    }
    public class ChartData
    {
        public required string X { get; set; }
        public int Y { get; set; }


    }
    private void InitializeDataSet()
    {
        StandDataSet = new List<ChartData>
        {
        new ChartData{ X="Power" , Y= (int)stand.Power},
        new ChartData{ X= "Speed", Y= (int)stand.Speed},
        new ChartData{ X= "Range", Y= (int)stand.Range},
        new ChartData{ X= "Persistence", Y= (int)stand.Persistence},
        new ChartData{ X= "Precision", Y= (int)stand.Precision},
        new ChartData{ X= "Potential", Y= (int)stand.Potential},

        };
    }
}


